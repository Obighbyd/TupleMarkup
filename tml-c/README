What is TML?

	TML (Tuple Markup Language)
	github.com/judnich/TupleMarkup

	An extremely simple all-purpose markup language: nested lists with 
	bracket-minimizing syntax. It enables JSON-like and XML-like semantics 
	within the same clean and consistent language, plus much more.


What's in this folder? 

	This folder contains a TML parser and utilities implemented in C.

	The parser is written to be extremely memory efficient and fast. Parsing is
	done almost entirely "in-place", and node data structures generated by the parser
	are written and packed into a single contiguous internal data buffer. This means
	malloc isn't even necessary by the parser, and memory usage is compact enough that
	this parser could be easily modified for use in very small embedded systems with
	no heap allocation at all.

	Memory efficiency was an important goal; since TML recognizes a node for each word
	separated by whitespace, a unoptimized parser might incur a lot of memory overhead
	for long text documents marked up with TML due to all the nodes produced
	(e.g. "[ a long paragraph blah blah blah blah node node node node node  ... ]").

	Fortunately, there's no need to worry with this parser. Each node in the example 
	above needs only one byte overhead, which is trivial. Furthermore, copying the
	contents of a list of many words is quite easy and very fast simply using the 
	built-in tml_node_to_string conversion function.

	This parser should be compatible with any C89 compiler (C89 was targeted in favor
	of C99 only to maximize compatibility). The parser supports ASCII or UTF8 input.

Installation

	To run the included unit tests go to /tests and type "make run".
	
	No installation is really required since this entire parser consists of two
	.c and two .h files. Making a library out of this would probably be overkill.
	You can just add these files to your project:

		tml_parser.c
		tml_parser.h
		tml_tokenizer.c
		tml_tokenizer.h

	And you should be all ready to use TML in your project.

